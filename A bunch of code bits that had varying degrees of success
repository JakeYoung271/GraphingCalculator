x,y_val,height=0,0,0 #initializing variables
total_info = np.array([]) #initializing list
pixels=[]
delta = 0
for i in range (0,dimensions): 
    x = (i*x_dim/dimensions)+l_bound
    y_val=eval(equation)
    height=u_bound-y_val
    height/=y_dim
    height*=dimensions
    height=round(height)
    pixels.append(height)
    if i != 0:
        delta = (height-pixels[i-1])
    info=np.array([height,delta,x])
    total_info.append(info,axis=0)
#index = 1
#for i in range (0,dimensions-1):
    #for p in range (0,abs(delta[i])):
        #x = (i*x_dim/dimensions)+l_bound+((p+1)/abs(delta[i]))
        #y_val=eval(equation)
       # height=u_bound-y_val
       # height/=y_dim
       # height*=dimensions
      #  height=round(height)
       # pixels.insert(index,)
        index +=1
print(len(pixels))
#for i in range (0,len(pixels)):
    #print(i,pixels[i])
for i in range (0,dimensions):
    if 0<pixels[i]<dimensions:
        graph[(pixels[i]),round(i),1]=0

imshow(graph)
print(len(delta))
print(delta)




pixels=np.zeros([dimensions,2])
for i in range (0,dimensions): 
    x = (i*x_dim/dimensions)+l_bound
    y_val=eval(equation)
    height=u_bound-y_val
    height/=y_dim
    height*=dimensions
    height=round(height)
    pixels[i,0]=height
    x+=0.1
    delta1=eval(equation)
    deriv=(delta1-y_val)/0.1
    ScaledDeriv=deriv*y_dim/x_dim
    pixels[i,1]=round(ScaledDeriv)
for z in range (0, dimensions):
    if 0<pixels[z,0]<dimensions:
        graph[int(pixels[z,0]),z,1]=0

for p in range (1,3):     
    for z in range (0, dimensions):
        if 0<pixels[z,0]+p*pixels[z,1]<dimensions:
            graph[int(pixels[z,0]+p*pixels[z,1]),i,1]=0
    for z in range (0, dimensions):
        if 0<pixels[z,0]-p*pixels[z,1]<dimensions:
             graph[int(pixels[z,0]-p*pixels[z,1]),z,1]=0    

imshow(graph)




# x,y_val,height=0,0,0 #initializing variables
pixels = [] #initializing list
for i in range (0,dimensions): 
    x = (i*x_dim/dimensions)+l_bound
    y_val=eval(equation)
    height=u_bound-y_val
    height/=y_dim
    height*=dimensions
    height=round(height)
    pixels.append(height)
for i in range (0,dimensions):
    if pixels[i]>0 and pixels[i]<dimensions:
        graph[(pixels[i]),i,1]=0
        if i<dimensions-1:
            delta=pixels[i+1]-pixels[i]
            if abs(delta)>=1:
                sign=abs(delta)/delta
                num=sign
                for z in range (0,abs(delta)):
                    if int(pixels[i]+num)<252:
                        graph[int(pixels[i]+num),i,1]=0
                        num+=1*sign
imshow(graph)



x,y_val,height=0,0,0 #initializing variables
pixels = [] #initializing list
connectors = int(input("pick"))
total=connectors*dimensions
for i in range (0,total): 
    x = (i*x_dim/total)+l_bound
    y_val=eval(equation)
    height=u_bound-y_val
    height/=y_dim
    height*=dimensions
    height=round(height)
    pixels.append(height)
#print(len(pixels))
#for i in range (0,len(pixels)):
    #print(i,pixels[i])
for i in range (0,total):
    if 0<pixels[i]<dimensions:
        graph[(pixels[i]),round(i/connectors),1]=0

imshow(graph)

